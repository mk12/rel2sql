#![allow(unknown_lints)]
#![allow(clippy)]

use ulc::{Query, Term};

grammar;

// Top level rule

pub Query: Query<'input> = {
    "{" <tuple:Tuple> ":" <formula:Term> "}" => Query { <> }
};

// Nonterminals

Tuple: Vec<Term<'input>> = {
    "(" <Comma<Term>> ")" => <>
};

Term: Term<'input> = {
    Exists <vars:CommaOne<Ident>> "." <t:Term> =>
        Term::Abs(vars, Box::new(t)),
    Tier<"|", Tier<"&", Tier<r"(=|!=)", Tier<r"[<>]=?", Tier<r"[+-]",
        Tier<r"[*/%]", UnaryTier<"!", BaseTerm>>>>>>>,
};

BaseTerm: Term<'input> = {
    Number => Term::Const(<>),
    QuotedString => Term::Const(<>),
    Ident => Term::Var(<>),
    Ident Tuple => Term::App(<>),
    "(" <Term> ")",
};

UnaryTier<Op, Next>: Term<'input> = {
    <op:Op> <t:UnaryTier<Op, Next>> => Term::App(op, vec![t]),
    Next,
};

Tier<Op, Next>: Term<'input> = {
    <lhs:Tier<Op, Next>> <op:Op> <rhs:Next> => Term::App(op, vec![lhs, rhs]),
    Next,
};

// Terminals

match {
    r"(?i)exists" => Exists,
} else {
    r"[0-9]+" => Number,
    r"'[^']*'" => QuotedString,
    r"[a-zA-Z][a-zA-Z0-9]*" => Ident,
    _
}

// Helpers

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

CommaOne<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};
